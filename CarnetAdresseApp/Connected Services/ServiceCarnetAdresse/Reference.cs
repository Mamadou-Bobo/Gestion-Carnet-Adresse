//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarnetAdresseApp.ServiceCarnetAdresse {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/MetierCarnetAdresse")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="contact", Namespace="http://schemas.datacontract.org/2004/07/MetierCarnetAdresse.Model")]
    [System.SerializableAttribute()]
    public partial class contact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cspField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string prenomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sexeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string villeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string csp {
            get {
                return this.cspField;
            }
            set {
                if ((object.ReferenceEquals(this.cspField, value) != true)) {
                    this.cspField = value;
                    this.RaisePropertyChanged("csp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idContact {
            get {
                return this.idContactField;
            }
            set {
                if ((this.idContactField.Equals(value) != true)) {
                    this.idContactField = value;
                    this.RaisePropertyChanged("idContact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nom {
            get {
                return this.nomField;
            }
            set {
                if ((object.ReferenceEquals(this.nomField, value) != true)) {
                    this.nomField = value;
                    this.RaisePropertyChanged("nom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string prenom {
            get {
                return this.prenomField;
            }
            set {
                if ((object.ReferenceEquals(this.prenomField, value) != true)) {
                    this.prenomField = value;
                    this.RaisePropertyChanged("prenom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sexe {
            get {
                return this.sexeField;
            }
            set {
                if ((object.ReferenceEquals(this.sexeField, value) != true)) {
                    this.sexeField = value;
                    this.RaisePropertyChanged("sexe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ville {
            get {
                return this.villeField;
            }
            set {
                if ((object.ReferenceEquals(this.villeField, value) != true)) {
                    this.villeField = value;
                    this.RaisePropertyChanged("ville");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="numtel", Namespace="http://schemas.datacontract.org/2004/07/MetierCarnetAdresse.Model")]
    [System.SerializableAttribute()]
    public partial class numtel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idNumTelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string numeroTelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idContact {
            get {
                return this.idContactField;
            }
            set {
                if ((this.idContactField.Equals(value) != true)) {
                    this.idContactField = value;
                    this.RaisePropertyChanged("idContact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idNumTel {
            get {
                return this.idNumTelField;
            }
            set {
                if ((this.idNumTelField.Equals(value) != true)) {
                    this.idNumTelField = value;
                    this.RaisePropertyChanged("idNumTel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string numeroTel {
            get {
                return this.numeroTelField;
            }
            set {
                if ((object.ReferenceEquals(this.numeroTelField, value) != true)) {
                    this.numeroTelField = value;
                    this.RaisePropertyChanged("numeroTel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceCarnetAdresse.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        CarnetAdresseApp.ServiceCarnetAdresse.CompositeType GetDataUsingDataContract(CarnetAdresseApp.ServiceCarnetAdresse.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.CompositeType> GetDataUsingDataContractAsync(CarnetAdresseApp.ServiceCarnetAdresse.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addContact", ReplyAction="http://tempuri.org/IService1/addContactResponse")]
        bool addContact(CarnetAdresseApp.ServiceCarnetAdresse.contact c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addContact", ReplyAction="http://tempuri.org/IService1/addContactResponse")]
        System.Threading.Tasks.Task<bool> addContactAsync(CarnetAdresseApp.ServiceCarnetAdresse.contact c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListContact", ReplyAction="http://tempuri.org/IService1/getListContactResponse")]
        CarnetAdresseApp.ServiceCarnetAdresse.contact[] getListContact();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListContact", ReplyAction="http://tempuri.org/IService1/getListContactResponse")]
        System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.contact[]> getListContactAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deleteContact", ReplyAction="http://tempuri.org/IService1/deleteContactResponse")]
        bool deleteContact(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deleteContact", ReplyAction="http://tempuri.org/IService1/deleteContactResponse")]
        System.Threading.Tasks.Task<bool> deleteContactAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getContact", ReplyAction="http://tempuri.org/IService1/getContactResponse")]
        CarnetAdresseApp.ServiceCarnetAdresse.contact getContact(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getContact", ReplyAction="http://tempuri.org/IService1/getContactResponse")]
        System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.contact> getContactAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/editContact", ReplyAction="http://tempuri.org/IService1/editContactResponse")]
        bool editContact(CarnetAdresseApp.ServiceCarnetAdresse.contact c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/editContact", ReplyAction="http://tempuri.org/IService1/editContactResponse")]
        System.Threading.Tasks.Task<bool> editContactAsync(CarnetAdresseApp.ServiceCarnetAdresse.contact c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addNumber", ReplyAction="http://tempuri.org/IService1/addNumberResponse")]
        bool addNumber(CarnetAdresseApp.ServiceCarnetAdresse.numtel num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addNumber", ReplyAction="http://tempuri.org/IService1/addNumberResponse")]
        System.Threading.Tasks.Task<bool> addNumberAsync(CarnetAdresseApp.ServiceCarnetAdresse.numtel num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListNumber", ReplyAction="http://tempuri.org/IService1/getListNumberResponse")]
        CarnetAdresseApp.ServiceCarnetAdresse.numtel[] getListNumber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListNumber", ReplyAction="http://tempuri.org/IService1/getListNumberResponse")]
        System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.numtel[]> getListNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/searchContact", ReplyAction="http://tempuri.org/IService1/searchContactResponse")]
        CarnetAdresseApp.ServiceCarnetAdresse.contact[] searchContact(string recherche);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/searchContact", ReplyAction="http://tempuri.org/IService1/searchContactResponse")]
        System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.contact[]> searchContactAsync(string recherche);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logError", ReplyAction="http://tempuri.org/IService1/logErrorResponse")]
        void logError(string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logError", ReplyAction="http://tempuri.org/IService1/logErrorResponse")]
        System.Threading.Tasks.Task logErrorAsync(string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/showErrorMessage", ReplyAction="http://tempuri.org/IService1/showErrorMessageResponse")]
        string showErrorMessage(string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/showErrorMessage", ReplyAction="http://tempuri.org/IService1/showErrorMessageResponse")]
        System.Threading.Tasks.Task<string> showErrorMessageAsync(string error);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : CarnetAdresseApp.ServiceCarnetAdresse.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<CarnetAdresseApp.ServiceCarnetAdresse.IService1>, CarnetAdresseApp.ServiceCarnetAdresse.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public CarnetAdresseApp.ServiceCarnetAdresse.CompositeType GetDataUsingDataContract(CarnetAdresseApp.ServiceCarnetAdresse.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.CompositeType> GetDataUsingDataContractAsync(CarnetAdresseApp.ServiceCarnetAdresse.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public bool addContact(CarnetAdresseApp.ServiceCarnetAdresse.contact c) {
            return base.Channel.addContact(c);
        }
        
        public System.Threading.Tasks.Task<bool> addContactAsync(CarnetAdresseApp.ServiceCarnetAdresse.contact c) {
            return base.Channel.addContactAsync(c);
        }
        
        public CarnetAdresseApp.ServiceCarnetAdresse.contact[] getListContact() {
            return base.Channel.getListContact();
        }
        
        public System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.contact[]> getListContactAsync() {
            return base.Channel.getListContactAsync();
        }
        
        public bool deleteContact(int id) {
            return base.Channel.deleteContact(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteContactAsync(int id) {
            return base.Channel.deleteContactAsync(id);
        }
        
        public CarnetAdresseApp.ServiceCarnetAdresse.contact getContact(int id) {
            return base.Channel.getContact(id);
        }
        
        public System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.contact> getContactAsync(int id) {
            return base.Channel.getContactAsync(id);
        }
        
        public bool editContact(CarnetAdresseApp.ServiceCarnetAdresse.contact c) {
            return base.Channel.editContact(c);
        }
        
        public System.Threading.Tasks.Task<bool> editContactAsync(CarnetAdresseApp.ServiceCarnetAdresse.contact c) {
            return base.Channel.editContactAsync(c);
        }
        
        public bool addNumber(CarnetAdresseApp.ServiceCarnetAdresse.numtel num) {
            return base.Channel.addNumber(num);
        }
        
        public System.Threading.Tasks.Task<bool> addNumberAsync(CarnetAdresseApp.ServiceCarnetAdresse.numtel num) {
            return base.Channel.addNumberAsync(num);
        }
        
        public CarnetAdresseApp.ServiceCarnetAdresse.numtel[] getListNumber() {
            return base.Channel.getListNumber();
        }
        
        public System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.numtel[]> getListNumberAsync() {
            return base.Channel.getListNumberAsync();
        }
        
        public CarnetAdresseApp.ServiceCarnetAdresse.contact[] searchContact(string recherche) {
            return base.Channel.searchContact(recherche);
        }
        
        public System.Threading.Tasks.Task<CarnetAdresseApp.ServiceCarnetAdresse.contact[]> searchContactAsync(string recherche) {
            return base.Channel.searchContactAsync(recherche);
        }
        
        public void logError(string error) {
            base.Channel.logError(error);
        }
        
        public System.Threading.Tasks.Task logErrorAsync(string error) {
            return base.Channel.logErrorAsync(error);
        }
        
        public string showErrorMessage(string error) {
            return base.Channel.showErrorMessage(error);
        }
        
        public System.Threading.Tasks.Task<string> showErrorMessageAsync(string error) {
            return base.Channel.showErrorMessageAsync(error);
        }
    }
}
